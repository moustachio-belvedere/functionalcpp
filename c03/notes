#include <cstdio>

int ask() { return 2; }

using funcptr = decltype(ask)*;

struct c2f {
    operator funcptr() const
    {
        return ask;
    }

    operator() () const
    {
      return 3;
    }

    operator() (int x) const
    {
      return x + 5;
    }
};

int main()
{
    auto  a1 = &ask;
    auto& a2 = ask;
    c2f   a3{};

    printf("%d\n", a1());
    printf("%d\n", a2());
    printf("%d\n", a3());

    printf("me: %Le\n",
    (long double)7.0/(long double)3.0 -
    (long double)4.0/(long double)3.0 -
    (long double)1.0);

    printf("me: %e\n",
    7.0/3.0 - 4.0/3.0 - 1.0);

    printf("me: %e\n",
    7.0f/3.0f - 4.0f/3.0f - 1.0f);

/*
me: -1.084202e-19
me: 2.220446e-16
me: -1.192093e-07
*/

    return 0;
}

The c2f case uses the casting operator definition. What are the 'sneaky tricks' referred to in text that could be used to pass args?

"These function objects have one advantage compared to the ordinary functions: each instance can have its own state..." is this an advantage? It's a power, but it comes with responsibility!

Regarding the count_if example, std::bind might be a nice way to achieve it instead of an explicit class. Probably the same thing "under the hood"... maybe it will be discussed later. (Lambda also an option..)

"""
The standard library provides a specialization of std::plus when T is not specified, which leaves the parameter types and return type to be deduced.
plus<void>
(C++14)
	function object implementing x + y deducing argument and return types
(class template specialization)
"""
does this happen with user defined types too?
